/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Positive Scenario
- Description: Validate that the function returns the correct TimeEntry object when a valid index is provided.
- Steps: Provide a valid index of an existing TimeEntry in the list.
- Expected Result: The function should return the TimeEntry object at the specified index.

Test Scenario 2: Negative Scenario
- Description: Validate that the function handles an invalid index appropriately.
- Steps: Provide an index that is out of bounds of the TimeEntry list.
- Expected Result: The function should throw an IndexOutOfBoundsException.

Test Scenario 3: Negative Scenario
- Description: Validate that the function handles a negative index appropriately.
- Steps: Provide a negative index.
- Expected Result: The function should throw an IndexOutOfBoundsException.

Test Scenario 4: Positive Scenario
- Description: Validate that the function returns the correct TimeEntry object when the list contains only one element.
- Steps: Provide 0 as an index when the list contains only one TimeEntry.
- Expected Result: The function should return the only TimeEntry in the list.

Test Scenario 5: Positive Scenario
- Description: Validate that the function returns the first TimeEntry object when index 0 is provided.
- Steps: Provide 0 as an index in a list with multiple TimeEntries.
- Expected Result: The function should return the first TimeEntry in the list.

Test Scenario 6: Positive Scenario
- Description: Validate that the function returns the last TimeEntry object when the last index is provided.
- Steps: Provide the last index in a list with multiple TimeEntries.
- Expected Result: The function should return the last TimeEntry in the list.
*/
package clinic.programming.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import clinic.programming.timetracker.core.dao.TimeEntry;
import java.util.List;
import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class Tracker_get_1b945bb04e_Test {
    @Autowired
    private Tracker tracker;
    private TimeEntry timeEntry1;
    private TimeEntry timeEntry2;

    @Before
    public void setUp() {
        timeEntry1 = new TimeEntry();
        timeEntry2 = new TimeEntry();
        tracker.add(timeEntry1);
        tracker.add(timeEntry2);
    }

    @Test
    public void testGetValidIndex() {
        TimeEntry result = tracker.get(0);
        assertEquals(timeEntry1, result);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetInvalidIndex() {
        tracker.get(5);
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetNegativeIndex() {
        tracker.get(-1);
    }

    @Test
    public void testGetSingleElement() {
        Tracker singleEntryTracker = new Tracker();
        singleEntryTracker.add(timeEntry1);
        TimeEntry result = singleEntryTracker.get(0);
        assertEquals(timeEntry1, result);
    }

    @Test
    public void testGetFirstElement() {
        TimeEntry result = tracker.get(0);
        assertEquals(timeEntry1, result);
    }

    @Test
    public void testGetLastElement() {
        TimeEntry result = tracker.get(tracker.size() - 1);
        assertEquals(timeEntry2, result);
    }
}
