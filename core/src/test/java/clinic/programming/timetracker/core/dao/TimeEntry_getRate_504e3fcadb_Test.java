/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the rate is a positive float value
   - Description: This scenario is to test the getRate function when the rate is a positive float value. The expected result should match the set value.

2. Scenario: Test when the rate is zero
   - Description: This scenario is to test the getRate function when the rate is zero. The expected result should be zero.

3. Scenario: Test when the rate is a negative float value
   - Description: This scenario is to test the getRate function when the rate is a negative float value. The expected result should match the set value.

4. Scenario: Test when the rate is a very large float value
   - Description: This scenario is to test the getRate function when the rate is a very large float value. The expected result should match the set value.

5. Scenario: Test when the rate is a very small float value (near zero but not zero)
   - Description: This scenario is to test the getRate function when the rate is a very small float value. The expected result should match the set value.

6. Scenario: Test when the rate is a float value with many decimal places
   - Description: This scenario is to test the getRate function when the rate is a float value with many decimal places. The expected result should match the set value.

7. Scenario: Test when the rate is not set (null)
   - Description: This scenario is to test the getRate function when the rate is not set. As rate is a primitive float, it cannot be null. The expected result should be 0.0, the default value for a float.

8. Scenario: Test when the rate is NaN (Not a Number)
   - Description: This scenario is to test the getRate function when the rate is NaN. The expected result should be NaN.

9. Scenario: Test when the rate is positive or negative infinity
   - Description: This scenario is to test the getRate function when the rate is positive or negative infinity. The expected result should match the set value.

10. Scenario: Test the precision of the returned rate
    - Description: This scenario is to test the precision of the returned rate. The expected result should match the set value up to a certain number of decimal places.
*/
package clinic.programming.timetracker.core.dao;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class TimeEntry_getRate_504e3fcadb_Test {

    private TimeEntry timeEntry;

    @Before
    public void setUp() {
        timeEntry = new TimeEntry();
    }

    @Test
    public void testGetRate_PositiveFloat() {
        float expectedRate = 5.5f;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_Zero() {
        float expectedRate = 0.0f;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_NegativeFloat() {
        float expectedRate = -5.5f;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_LargeFloat() {
        float expectedRate = Float.MAX_VALUE;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_SmallFloat() {
        float expectedRate = Float.MIN_VALUE;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_ManyDecimalPlaces() {
        float expectedRate = 5.5555555f;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_NotSet() {
        float expectedRate = 0.0f;
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_NaN() {
        float expectedRate = Float.NaN;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_Infinity() {
        float expectedRate = Float.POSITIVE_INFINITY;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);

        expectedRate = Float.NEGATIVE_INFINITY;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.0);
    }

    @Test
    public void testGetRate_Precision() {
        float expectedRate = 5.5555555f;
        timeEntry.setRate(expectedRate);
        Assert.assertEquals(expectedRate, timeEntry.getRate(), 0.000001);
    }
}
