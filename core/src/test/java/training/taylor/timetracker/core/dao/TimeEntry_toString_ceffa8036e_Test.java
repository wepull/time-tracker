/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Null Values
- Test the function when all the variables (description, rate, and time) are null. The expected output should be "TimeEntry{description='null', rate=null, time=null}".

Test Scenario 2: Empty String
- Test the function when the description is an empty string, rate, and time are null. The expected output should be "TimeEntry{description='', rate=null, time=null}".

Test Scenario 3: Zero Values
- Test the function when the description is an empty string, rate is 0 and time is 0. The expected output should be "TimeEntry{description='', rate=0, time=0}".

Test Scenario 4: Positive Values
- Test the function when the description is 'Test', rate is 10, and time is 100. The expected output should be "TimeEntry{description='Test', rate=10, time=100}".

Test Scenario 5: Negative Values
- Test the function when the description is 'Test', rate is -10, and time is -100. The expected output should be "TimeEntry{description='Test', rate=-10, time=-100}".

Test Scenario 6: Long String
- Test the function with a long string for the description, a large positive number for the rate, and a large positive number for the time. The expected output should match the input values.

Test Scenario 7: Special Characters
- Test the function with special characters in the description, a positive number for the rate, and a positive number for the time. The expected output should match the input values.

Test Scenario 8: Unicode Characters
- Test the function with Unicode characters in the description, a positive number for the rate, and a positive number for the time. The expected output should match the input values.
*/
package training.taylor.timetracker.core.dao;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class TimeEntry {
    private String description;
    private float rate;
    private int time;

    public String getDescription() {
        return description;
    }

    public void setDescription(String value) {
        this.description = value;
    }

    public float getRate() {
        return rate;
    }

    public void setRate(float value) {
        this.rate = value;
    }

    public int getTime() {
        return time;
    }

    public void setTime(int value) {
        this.time = value;
    }

    @Override
    public String toString() {
        return "TimeEntry{" + "description='" + description + '\'' + ", rate=" + rate + ", time=" + time + '}';
    }
}

class TimeEntry_toString_ceffa8036e_Test {

    private TimeEntry timeEntry;

    @Before
    public void setUp() {
        timeEntry = new TimeEntry();
    }

    @Test
    public void testToStringWithNullValues() {
        String expected = "TimeEntry{description='null', rate=0.0, time=0}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithEmptyString() {
        timeEntry.setDescription("");
        String expected = "TimeEntry{description='', rate=0.0, time=0}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithZeroValues() {
        timeEntry.setDescription("");
        timeEntry.setRate(0);
        timeEntry.setTime(0);
        String expected = "TimeEntry{description='', rate=0.0, time=0}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithPositiveValues() {
        timeEntry.setDescription("Test");
        timeEntry.setRate(10);
        timeEntry.setTime(100);
        String expected = "TimeEntry{description='Test', rate=10.0, time=100}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithNegativeValues() {
        timeEntry.setDescription("Test");
        timeEntry.setRate(-10);
        timeEntry.setTime(-100);
        String expected = "TimeEntry{description='Test', rate=-10.0, time=-100}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithLongString() {
        String longString = new String(new char[1000]).replace("\0", "a");
        timeEntry.setDescription(longString);
        timeEntry.setRate(Float.MAX_VALUE);
        timeEntry.setTime(Integer.MAX_VALUE);
        String expected = "TimeEntry{description='" + longString + "', rate=" + Float.MAX_VALUE + ", time=" + Integer.MAX_VALUE + "}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithSpecialCharacters() {
        timeEntry.setDescription("!@#$%^&*()");
        timeEntry.setRate(10);
        timeEntry.setTime(100);
        String expected = "TimeEntry{description='!@#$%^&*()', rate=10.0, time=100}";
        Assert.assertEquals(expected, timeEntry.toString());
    }

    @Test
    public void testToStringWithUnicodeCharacters() {
        timeEntry.setDescription("\u263A");
        timeEntry.setRate(10);
        timeEntry.setTime(100);
        String expected = "TimeEntry{description='\u263A', rate=10.0, time=100}";
        Assert.assertEquals(expected, timeEntry.toString());
    }
}
