/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate the addition of a new `TimeEntry` object to the `entries` list.
   **Test Case:** Create a new `TimeEntry` object and pass it to the `add()` method. Then confirm that the `entries` list contains the new `TimeEntry` object.

2. **Scenario:** Validate the behavior when a `null` entry is added.
   **Test Case:** Pass a `null` parameter to the `add()` method. Check if the application throws a `NullPointerException` or if it handles it gracefully.

3. **Scenario:** Validate the addition of duplicate `TimeEntry` objects.
   **Test Case:** Create two identical `TimeEntry` objects and pass them to the `add()` method. Then confirm whether the `entries` list contains both objects or if it rejects the duplicate.

4. **Scenario:** Validate the addition of multiple `TimeEntry` objects in succession.
   **Test Case:** Create several `TimeEntry` objects and pass them to the `add()` method one by one. Then confirm that the `entries` list contains all the `TimeEntry` objects in the correct order.

5. **Scenario:** Validate the behavior of the `add()` method when the `entries` list is already at capacity.
   **Test Case:** Fill the `entries` list to capacity, then attempt to add another `TimeEntry` object. Check whether the application throws an `OutOfMemoryError` or if it handles the situation gracefully.

6. **Scenario:** Validate the behavior when a `TimeEntry` object is added after the `entries` list has been cleared.
   **Test Case:** Add a `TimeEntry` object to the `entries` list, then clear the list and add another `TimeEntry` object. Confirm that the `entries` list only contains the second `TimeEntry` object.

7. **Scenario:** Validate the behavior when a `TimeEntry` object is added while the `entries` list contains `null` entries.
   **Test Case:** Add a `null` entry to the `entries` list, then add a `TimeEntry` object. Check if the application throws a `NullPointerException` or if it handles it gracefully.
*/
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import training.taylor.timetracker.core.dao.TimeEntry;

public class Tracker_add_7d27642e21_Test {
    Tracker tracker;

    @Mock
    TimeEntry mockEntry;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        tracker = new Tracker();
    }

    @Test
    public void testAdd() {
        tracker.add(mockEntry);
        assertEquals(1, tracker.size());
        assertEquals(mockEntry, tracker.get(0));
    }

    @Test(expected = NullPointerException.class)
    public void testAddNull() {
        tracker.add(null);
    }

    @Test
    public void testAddDuplicate() {
        tracker.add(mockEntry);
        tracker.add(mockEntry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testAddMultiple() {
        TimeEntry entry2 = mock(TimeEntry.class);
        TimeEntry entry3 = mock(TimeEntry.class);
        tracker.add(mockEntry);
        tracker.add(entry2);
        tracker.add(entry3);
        assertEquals(3, tracker.size());
        assertEquals(mockEntry, tracker.get(0));
        assertEquals(entry2, tracker.get(1));
        assertEquals(entry3, tracker.get(2));
    }

    @Test(expected = OutOfMemoryError.class)
    public void testAddAtCapacity() {
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            tracker.add(mockEntry);
        }
        tracker.add(mockEntry);
    }

    @Test
    public void testAddAfterClear() {
        tracker.add(mockEntry);
        tracker.remove(mockEntry);
        tracker.add(mockEntry);
        assertEquals(1, tracker.size());
        assertEquals(mockEntry, tracker.get(0));
    }

    @Test(expected = NullPointerException.class)
    public void testAddAfterNull() {
        tracker.add(null);
        tracker.add(mockEntry);
    }
}
