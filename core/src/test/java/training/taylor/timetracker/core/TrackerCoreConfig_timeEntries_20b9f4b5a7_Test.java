/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Empty List Test**
   * Description: Verify that the function `timeEntries` returns an empty list when called without any entries being added.

2. **Scenario: Add Entry Test**
   * Description: Verify that adding an entry to `timeEntries` list is successful and the size of the list increases.

3. **Scenario: Remove Entry Test**
   * Description: Verify that removing an entry from `timeEntries` list is successful and the size of the list decreases.

4. **Scenario: Add Null Entry Test**
   * Description: Verify that adding a null entry to `timeEntries` list is handled correctly.

5. **Scenario: Remove Non-Existent Entry Test**
   * Description: Verify that removing a non-existent entry from `timeEntries` list is handled correctly.

6. **Scenario: Add Duplicate Entry Test**
   * Description: Verify that adding a duplicate entry to `timeEntries` list is handled correctly.

7. **Scenario: List Order Test**
   * Description: Verify that entries added to `timeEntries` list maintain the order in which they were added.

8. **Scenario: Clear List Test**
   * Description: Verify that clearing the `timeEntries` list removes all entries.

9. **Scenario: Size of List Test**
   * Description: Verify that the size of `timeEntries` list is correctly reported before and after adding/removing entries.

10. **Scenario: Mutability Test**
    * Description: Verify that the `timeEntries` list is mutable and changes to the list (add/remove entries) are reflected in subsequent calls to the function.

11. **Scenario: Null List Test**
    * Description: Verify that the function `timeEntries` does not return null.

12. **Scenario: Add Large Number of Entries Test**
    * Description: Verify that adding a large number of entries to `timeEntries` list is handled correctly and does not result in any errors or performance issues.
*/
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import training.taylor.timetracker.core.dao.TimeEntry;
import java.util.List;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class TrackerCoreConfig_timeEntries_20b9f4b5a7_Test {

    private TrackerCoreConfig trackerCoreConfig;

    @Before
    public void setUp() {
        trackerCoreConfig = new TrackerCoreConfig();
    }

    @Test
    public void testEmptyList() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        assertNotNull(timeEntries);
        assertTrue(timeEntries.isEmpty());
    }

    @Test
    public void testAddEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        assertEquals(1, timeEntries.size());
    }

    @Test
    public void testRemoveEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        timeEntries.remove(timeEntry);
        assertTrue(timeEntries.isEmpty());
    }

    @Test(expected = NullPointerException.class)
    public void testAddNullEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        timeEntries.add(null);
    }

    @Test
    public void testRemoveNonExistentEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        assertFalse(timeEntries.remove(timeEntry));
    }

    @Test
    public void testAddDuplicateEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        timeEntries.add(timeEntry);
        assertEquals(2, timeEntries.size());
    }

    @Test
    public void testListOrder() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry1 = new TimeEntry();
        TimeEntry timeEntry2 = new TimeEntry();
        timeEntries.add(timeEntry1);
        timeEntries.add(timeEntry2);
        assertSame(timeEntry1, timeEntries.get(0));
        assertSame(timeEntry2, timeEntries.get(1));
    }

    @Test
    public void testClearList() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        timeEntries.clear();
        assertTrue(timeEntries.isEmpty());
    }

    @Test
    public void testSizeOfList() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        assertEquals(1, timeEntries.size());
        timeEntries.remove(timeEntry);
        assertEquals(0, timeEntries.size());
    }

    @Test
    public void testMutability() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        List<TimeEntry> timeEntries2 = trackerCoreConfig.timeEntries();
        assertSame(timeEntries, timeEntries2);
    }

    @Test
    public void testNullList() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        assertNotNull(timeEntries);
    }

    @Test
    public void testAddLargeNumberOfEntries() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        for (int i = 0; i < 10000; i++) {
            TimeEntry timeEntry = new TimeEntry();
            timeEntries.add(timeEntry);
        }
        assertEquals(10000, timeEntries.size());
    }
}
