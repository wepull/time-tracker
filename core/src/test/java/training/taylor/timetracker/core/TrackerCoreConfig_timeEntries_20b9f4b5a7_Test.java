/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: 
Validate that the timeEntries() method returns an instance of ArrayList.

Test Scenario 2: 
Validate that the timeEntries() method returns an empty list when it is initially called.

Test Scenario 3: 
Validate that the timeEntries() method does not return null.

Test Scenario 4: 
Validate the type of elements that can be added to the list returned by timeEntries() method. It should only be able to add instances of TimeEntry.

Test Scenario 5: 
Validate that the list returned by timeEntries() method maintains the order of elements. The order in which elements are added should be the same as the order in which elements are retrieved.

Test Scenario 6: 
Validate that duplicate TimeEntry elements can be added to the list returned by the timeEntries() method.

Test Scenario 7: 
Validate that the size of the list increases correctly when elements are added.

Test Scenario 8: 
Validate that the size of the list decreases correctly when elements are removed.

Test Scenario 9: 
Validate that the list returned by timeEntries() method can be cleared, i.e., all elements can be removed and the size of the list becomes zero.

Test Scenario 10: 
Validate that an IndexOutOfBoundsException is thrown when trying to access an element at an index that is not in the list's range.
*/
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class TrackerCoreConfig_timeEntries_20b9f4b5a7_Test {
    TrackerCoreConfig trackerCoreConfig;

    @Before
    public void setup() {
        trackerCoreConfig = new TrackerCoreConfig();
    }

    @Test
    public void testTimeEntriesMethodReturnsInstanceOfArrayList() {
        assertTrue(trackerCoreConfig.timeEntries() instanceof ArrayList);
    }

    @Test
    public void testTimeEntriesMethodReturnsEmptyListInitially() {
        assertTrue(trackerCoreConfig.timeEntries().isEmpty());
    }

    @Test
    public void testTimeEntriesMethodDoesNotReturnNull() {
        assertNotNull(trackerCoreConfig.timeEntries());
    }

    @Test
    public void testTimeEntriesMethodCanAddInstanceOfTimeEntry() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        assertTrue(timeEntries.contains(timeEntry));
    }

    @Test
    public void testTimeEntriesMethodMaintainsOrderOfElements() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry1 = new TimeEntry();
        TimeEntry timeEntry2 = new TimeEntry();
        timeEntries.add(timeEntry1);
        timeEntries.add(timeEntry2);
        assertSame(timeEntry1, timeEntries.get(0));
        assertSame(timeEntry2, timeEntries.get(1));
    }

    @Test
    public void testTimeEntriesMethodCanAddDuplicateTimeEntries() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        timeEntries.add(timeEntry);
        assertEquals(2, timeEntries.size());
    }

    @Test
    public void testTimeEntriesMethodIncreasesSizeCorrectly() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        assertEquals(0, timeEntries.size());
        timeEntries.add(new TimeEntry());
        assertEquals(1, timeEntries.size());
    }

    @Test
    public void testTimeEntriesMethodDecreasesSizeCorrectly() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        TimeEntry timeEntry = new TimeEntry();
        timeEntries.add(timeEntry);
        assertEquals(1, timeEntries.size());
        timeEntries.remove(timeEntry);
        assertEquals(0, timeEntries.size());
    }

    @Test
    public void testTimeEntriesMethodCanClearList() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        timeEntries.add(new TimeEntry());
        timeEntries.add(new TimeEntry());
        assertFalse(timeEntries.isEmpty());
        timeEntries.clear();
        assertTrue(timeEntries.isEmpty());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testTimeEntriesMethodThrowsExceptionForInvalidIndex() {
        List<TimeEntry> timeEntries = trackerCoreConfig.timeEntries();
        timeEntries.get(1);
    }
}
