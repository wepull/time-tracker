/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Set Rate with Positive Value
   Test to check if the rate is correctly set when a positive float value is passed to the setRate function.

2. Scenario: Set Rate with Negative Value
   Test to check the behavior of the setRate function when a negative float value is passed. According to business logic, rates cannot be negative so this should cause an error or exception.

3. Scenario: Set Rate with Zero
   Test to check how the setRate function behaves when zero is passed as the rate. Depending on the business logic, this could either be allowed or cause an error.

4. Scenario: Set Rate with Large Value
   Test to check the behavior of the setRate function when a very large float value is passed. This can help test the upper limits of the rate variable.

5. Scenario: Set Rate with Very Small Non-zero Value
   Test to check the behavior of the setRate function when a very small non-zero float value is passed. This can help test the lower limits of the rate variable.

6. Scenario: Set Rate with Null Value
   Test to check how the setRate function behaves when null is passed as the rate. This should likely cause an error or exception as a float value is expected.

7. Scenario: Set Rate with Non-float Value
   Test to check the behavior of the setRate function when a non-float value (like a string or an integer) is passed. This should cause an error or exception as a float value is expected.

8. Scenario: Set Rate Multiple Times
   Test to check if the setRate function correctly updates the rate value when called multiple times.

9. Scenario: Set Rate with Decimal Values
   Test to check if the setRate function correctly handles decimal values.

10. Scenario: Set Rate Without Invoking the Function
    Test to check the initial value of rate before the setRate function is called. This can help verify if the rate variable is initialized correctly.
*/
package training.taylor.timetracker.core.dao;

import org.junit.jupiter.api.Test;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;
import static org.junit.jupiter.api.Assertions.*;

@Component
@Scope("test")
public class TimeEntry_setRate_c937a96557_Test {

    @Test
    public void testSetRatePositiveValue() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 5.0f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateNegativeValue() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = -5.0f;
        assertThrows(IllegalArgumentException.class, () -> timeEntry.setRate(rate));
    }

    @Test
    public void testSetRateZero() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 0.0f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateLargeValue() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = Float.MAX_VALUE;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateSmallValue() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = Float.MIN_VALUE;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateNonFloatValue() {
        TimeEntry timeEntry = new TimeEntry();
        assertThrows(ClassCastException.class, () -> timeEntry.setRate(Float.parseFloat("non-float value")));
    }

    @Test
    public void testSetRateMultipleTimes() {
        TimeEntry timeEntry = new TimeEntry();
        float rate1 = 5.0f;
        float rate2 = 10.0f;
        timeEntry.setRate(rate1);
        timeEntry.setRate(rate2);
        assertEquals(rate2, timeEntry.getRate());
    }

    @Test
    public void testSetRateDecimalValues() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 5.5f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateWithoutInvokingFunction() {
        TimeEntry timeEntry = new TimeEntry();
        assertEquals(0.0f, timeEntry.getRate());
    }
}
