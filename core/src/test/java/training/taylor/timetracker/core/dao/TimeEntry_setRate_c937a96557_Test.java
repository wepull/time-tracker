/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Set rate with a positive float value 
   - Description: Validate that the setRate function accepts a positive float value and sets the "rate" variable correctly.

2. Scenario: Set rate with a zero value 
   - Description: Validate that the setRate function accepts zero as a valid input and sets the "rate" variable to zero.

3. Scenario: Set rate with a negative float value 
   - Description: Validate that the setRate function accepts a negative float value and sets the "rate" variable correctly.

4. Scenario: Set rate with a very large float value 
   - Description: Validate that the setRate function can handle very large float values and does not cause any overflow issues.

5. Scenario: Set rate with a very small float value 
   - Description: Validate that the setRate function can handle very small float values and does not cause any underflow issues.

6. Scenario: Set rate with a null value 
   - Description: Validate that the setRate function handles null values correctly and does not throw a null pointer exception.

7. Scenario: Set rate with non-numeric values 
   - Description: Validate that the setRate function handles non-numeric values correctly and throws the appropriate exception.

8. Scenario: Set rate with special characters 
   - Description: Validate that the setRate function handles special characters correctly and throws the appropriate exception.

9. Scenario: Set rate multiple times 
   - Description: Validate that the setRate function can be called multiple times and the "rate" variable is set with the last provided value. 

10. Scenario: Set rate with floating point precision values 
    - Description: Validate that the setRate function handles floating point precision values correctly and sets the "rate" variable with the correct precision.
*/
/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Set rate with a positive float value 
   - Description: Validate that the setRate function accepts a positive float value and sets the "rate" variable correctly.

2. Scenario: Set rate with a zero value 
   - Description: Validate that the setRate function accepts zero as a valid input and sets the "rate" variable to zero.

3. Scenario: Set rate with a negative float value 
   - Description: Validate that the setRate function accepts a negative float value and sets the "rate" variable correctly.

4. Scenario: Set rate with a very large float value 
   - Description: Validate that the setRate function can handle very large float values and does not cause any overflow issues.

5. Scenario: Set rate with a very small float value 
   - Description: Validate that the setRate function can handle very small float values and does not cause any underflow issues.

6. Scenario: Set rate multiple times 
   - Description: Validate that the setRate function can be called multiple times and the "rate" variable is set with the last provided value. 

7. Scenario: Set rate with floating point precision values 
    - Description: Validate that the setRate function handles floating point precision values correctly and sets the "rate" variable with the correct precision.
*/
package training.taylor.timetracker.core.dao;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TimeEntry_setRate_c937a96557_Test {

    @Test
    public void testSetRatePositive() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 15.5f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateZero() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 0.0f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateNegative() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = -15.5f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateLargeFloat() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = Float.MAX_VALUE;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateSmallFloat() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = Float.MIN_VALUE;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }

    @Test
    public void testSetRateMultipleTimes() {
        TimeEntry timeEntry = new TimeEntry();
        float rate1 = 10.5f;
        float rate2 = 20.5f;
        timeEntry.setRate(rate1);
        timeEntry.setRate(rate2);
        assertEquals(rate2, timeEntry.getRate());
    }

    @Test
    public void testSetRateWithPrecision() {
        TimeEntry timeEntry = new TimeEntry();
        float rate = 15.123456789f;
        timeEntry.setRate(rate);
        assertEquals(rate, timeEntry.getRate());
    }
}
