/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Set Rate with Positive Value
   Test to check if the rate is correctly set when a positive float value is passed to the setRate function.

2. Scenario: Set Rate with Zero Value
   Test to check if the rate is correctly set to zero when zero is passed as the parameter to the setRate function.

3. Scenario: Set Rate with Negative Value
   Test to check the behaviour of the setRate function when a negative float value is passed. Depending on the business logic, this could either throw an error or set the rate to the absolute value.

4. Scenario: Set Rate with Maximum Float Value
   Test to check if the setRate function is able to handle the maximum float value that Java can handle. 

5. Scenario: Set Rate with Minimum Float Value
   Test to check how the setRate function handles the smallest positive float value that Java can handle.

6. Scenario: Set Rate with NaN (Not a Number) Value
   Test to check the behaviour of the setRate function when NaN is passed as the parameter. This should ideally throw an error or exception.

7. Scenario: Set Rate with Null Value
   Test to check the behaviour of the setRate function when null is passed as the parameter. This should ideally throw an error or exception.

8. Scenario: Set Rate with Very Large Decimal Value
   Test to check if the setRate function can handle very large decimal numbers, and if it rounds off to the nearest float value correctly.

9. Scenario: Set Rate with Very Small Decimal Value
   Test to check if the setRate function can handle very small decimal numbers, and if it rounds off to the nearest float value correctly.

10. Scenario: Set Rate with Non-numeric String Value
    Test to check the behaviour of the setRate function when a non-numeric string is passed as the parameter. This should ideally throw an error or exception.

Note: The scenarios involving null and non-numeric string values might not be applicable in Java since the function parameter is of type float. However, these scenarios are still included for completeness and would be relevant in a language that is not statically typed.
*/
package training.taylor.timetracker.core.dao;

import org.junit.Assert;
import org.junit.Test;

public class TimeEntry_setRate_c937a96557_Test {

    @Test
    public void testSetRatePositive() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(5.0f);
        Assert.assertEquals(5.0f, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateZero() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(0.0f);
        Assert.assertEquals(0.0f, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateNegative() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(-5.0f);
        Assert.assertEquals(-5.0f, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateMaxFloat() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(Float.MAX_VALUE);
        Assert.assertEquals(Float.MAX_VALUE, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateMinFloat() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(Float.MIN_VALUE);
        Assert.assertEquals(Float.MIN_VALUE, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateNaN() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(Float.NaN);
        Assert.assertTrue(Float.isNaN(timeEntry.getRate()));
    }

    @Test
    public void testSetRateLargeDecimal() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(1234567890.1234567f);
        Assert.assertNotEquals(1234567890.1234567f, timeEntry.getRate(), 0.0f);
    }

    @Test
    public void testSetRateSmallDecimal() {
        TimeEntry timeEntry = new TimeEntry();
        timeEntry.setRate(0.000000123456789f);
        Assert.assertNotEquals(0.000000123456789f, timeEntry.getRate(), 0.0f);
    }
}
