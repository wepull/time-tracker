/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. Scenario: TimeEntry Object Exists in the List
   Test that when a `TimeEntry` object that exists in the `entries` list is passed to the `remove` method, it is successfully removed from the list.

2. Scenario: TimeEntry Object Does Not Exist in the List
   Test that when a `TimeEntry` object that does not exist in the `entries` list is passed to the `remove` method, the list remains unchanged and no exception is thrown.

3. Scenario: Null Object Passed to the Method
   Test that when a `null` object is passed to the `remove` method, the method handles it gracefully without throwing an exception and the list remains unchanged.

4. Scenario: Duplicate TimeEntry Object in the List
   Test that when a `TimeEntry` object, which has duplicates in the `entries` list, is passed to the `remove` method, all instances of that object are removed from the list.

5. Scenario: Empty List
   Test that when the `entries` list is empty and any `TimeEntry` object is passed to the `remove` method, the method handles it gracefully without throwing an exception and the list remains empty.

6. Scenario: Remove Method Called Consecutively
   Test that when the `remove` method is called consecutively with the same `TimeEntry` object, the method behaves as expected, i.e., it removes the object during the first call and does nothing during the subsequent calls.

7. Scenario: Large List
   Test that the `remove` method can handle a large `entries` list efficiently without any performance issues.

8. Scenario: Concurrent Removal
   Test that when the `remove` method is called concurrently from multiple threads, it behaves as expected and no data inconsistencies occur.
   
9. Scenario: List Contains Null Entries
   Test that when the `entries` list contains `null` entries and a non-null `TimeEntry` object is passed to the `remove` method, it removes the object correctly and leaves the `null` entries unaffected.
*/
package training.taylor.timetracker.core;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.ArrayList;
import java.util.List;
import training.taylor.timetracker.core.dao.TimeEntry;

public class Tracker_remove_bb9b871630_Test {

    @Mock
    private List<TimeEntry> entries;

    private Tracker tracker;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        tracker = new Tracker();
    }

    @Test
    public void testRemove_TimeEntryObjectExistsInList() {
        TimeEntry entry = mock(TimeEntry.class);
        entries.add(entry);
        tracker.remove(entry);
        verify(entries, times(1)).remove(entry);
    }

    @Test
    public void testRemove_TimeEntryObjectDoesNotExistInList() {
        TimeEntry entry = mock(TimeEntry.class);
        tracker.remove(entry);
        verify(entries, times(1)).remove(entry);
    }

    @Test
    public void testRemove_NullObjectPassedToMethod() {
        tracker.remove(null);
        verify(entries, times(1)).remove(null);
    }

    @Test
    public void testRemove_DuplicateTimeEntryObjectInList() {
        TimeEntry entry = mock(TimeEntry.class);
        entries.add(entry);
        entries.add(entry);
        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemove_EmptyList() {
        entries = new ArrayList<>();
        TimeEntry entry = mock(TimeEntry.class);
        tracker.remove(entry);
        assertTrue(entries.isEmpty());
    }

    @Test
    public void testRemove_RemoveMethodCalledConsecutively() {
        TimeEntry entry = mock(TimeEntry.class);
        entries.add(entry);
        tracker.remove(entry);
        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemove_LargeList() {
        for (int i = 0; i < 10000; i++) {
            entries.add(mock(TimeEntry.class));
        }
        TimeEntry entry = mock(TimeEntry.class);
        entries.add(entry);
        tracker.remove(entry);
        verify(entries, times(1)).remove(entry);
    }

    @Test
    public void testRemove_ListContainsNullEntries() {
        entries.add(null);
        TimeEntry entry = mock(TimeEntry.class);
        entries.add(entry);
        tracker.remove(entry);
        verify(entries, times(1)).remove(entry);
    }
}
