/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

Scenario 1: Empty List
- Given a TimeEntry list 'entries' that is empty
- When the size() function is called
- Then the returned value should be 0

Scenario 2: List with Single Entry
- Given a TimeEntry list 'entries' that contains one entry
- When the size() function is called
- Then the returned value should be 1

Scenario 3: List with Multiple Entries
- Given a TimeEntry list 'entries' that contains multiple entries
- When the size() function is called
- Then the returned value should be equal to the number of entries in the list

Scenario 4: List is Null
- Given a TimeEntry list 'entries' that is null
- When the size() function is called
- Then a NullPointerException should be thrown

Scenario 5: List with Duplicate Entries
- Given a TimeEntry list 'entries' that contains duplicate entries
- When the size() function is called
- Then the returned value should be equal to the total number of entries in the list including duplicates

Scenario 6: List with Null Entries
- Given a TimeEntry list 'entries' that contains one or more null entries
- When the size() function is called
- Then the returned value should be equal to the total number of entries in the list including the null entries
*/
package training.taylor.timetracker.core;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import training.taylor.timetracker.core.dao.TimeEntry;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import java.util.ArrayList;
import java.util.List;

@Component
public class Tracker {

    private List<TimeEntry> entries = new ArrayList<>();

    public void add(TimeEntry entry) {
        entries.add(entry);
    }

    public void remove(TimeEntry entry) {
        entries.remove(entry);
    }

    public int size() {
        return entries.size();
    }

    public TimeEntry get(int index) {
        return entries.get(index);
    }
}

public class Tracker_size_83d847afcf_Test {

    @Mock
    private TimeEntry entry;

    private Tracker tracker;

    @Before
    public void setup() {
        MockitoAnnotations.openMocks(this);
        tracker = new Tracker();
    }

    @Test
    public void testSizeWithEmptyList() {
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSizeWithSingleEntry() {
        tracker.add(entry);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSizeWithMultipleEntries() {
        tracker.add(entry);
        tracker.add(entry);
        tracker.add(entry);
        assertEquals(3, tracker.size());
    }

    @Test(expected = NullPointerException.class)
    public void testSizeWithNullList() {
        tracker = null;
        tracker.size();
    }

    @Test
    public void testSizeWithDuplicateEntries() {
        tracker.add(entry);
        tracker.add(entry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSizeWithNullEntries() {
        tracker.add(null);
        tracker.add(entry);
        assertEquals(2, tracker.size());
    }
}
