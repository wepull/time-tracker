/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

Scenario 1: Empty List
- Given a TimeEntry list 'entries' that is empty
- When the size() function is called
- Then the returned value should be 0

Scenario 2: List with Single Entry
- Given a TimeEntry list 'entries' that contains one entry
- When the size() function is called
- Then the returned value should be 1

Scenario 3: List with Multiple Entries
- Given a TimeEntry list 'entries' that contains multiple entries
- When the size() function is called
- Then the returned value should be equal to the number of entries in the list

Scenario 4: Null List
- Given a TimeEntry list 'entries' that is null
- When the size() function is called
- Then a NullPointerException should be thrown

Scenario 5: List with Duplicate Entries
- Given a TimeEntry list 'entries' that contains duplicate entries
- When the size() function is called
- Then the returned value should be equal to the number of entries in the list including duplicates

Scenario 6: Adding an Entry to the List
- Given a TimeEntry list 'entries' that contains 'n' entries
- When a new entry is added to the list and the size() function is called
- Then the returned value should be 'n+1'

Scenario 7: Removing an Entry from the List
- Given a TimeEntry list 'entries' that contains 'n' entries
- When an entry is removed from the list and the size() function is called
- Then the returned value should be 'n-1'
*/
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import java.util.ArrayList;
import java.util.List;
import training.taylor.timetracker.core.dao.TimeEntry;

public class Tracker_size_83d847afcf_Test {
    private Tracker tracker;
    private TimeEntry entry;

    @Before
    public void setUp() {
        tracker = new Tracker();
        entry = Mockito.mock(TimeEntry.class);
    }

    @Test
    public void testSize_EmptyList() {
        assertTrue("List should be empty", tracker.size() == 0);
    }

    @Test
    public void testSize_SingleEntry() {
        tracker.add(entry);
        assertTrue("List should contain one entry", tracker.size() == 1);
    }

    @Test
    public void testSize_MultipleEntries() {
        tracker.add(entry);
        tracker.add(entry);
        tracker.add(entry);
        assertTrue("List should contain three entries", tracker.size() == 3);
    }

    @Test(expected = NullPointerException.class)
    public void testSize_NullList() {
        tracker = null;
        tracker.size();
    }

    @Test
    public void testSize_DuplicateEntries() {
        tracker.add(entry);
        tracker.add(entry);
        assertTrue("List should contain two entries", tracker.size() == 2);
    }

    @Test
    public void testSize_AddEntry() {
        int initialSize = tracker.size();
        tracker.add(entry);
        assertTrue("Size should be initialSize + 1", tracker.size() == initialSize + 1);
    }

    @Test
    public void testSize_RemoveEntry() {
        tracker.add(entry);
        int initialSize = tracker.size();
        tracker.remove(entry);
        assertTrue("Size should be initialSize - 1", tracker.size() == initialSize - 1);
    }
}
