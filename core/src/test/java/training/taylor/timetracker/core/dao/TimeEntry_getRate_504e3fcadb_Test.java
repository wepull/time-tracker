/*
Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Initial Rate Value**
   - Description: Test should verify the initial rate value before any manipulation.
   
2. **Scenario: Rate Value After Modification**
   - Description: Test should verify if the rate value is accurately updated after modification.

3. **Scenario: Negative Rate Value**
   - Description: Test should verify the behavior of the function when the rate value is negative.

4. **Scenario: Rate Value as Zero**
   - Description: Test should verify the behavior of the function when the rate value is zero.

5. **Scenario: Rate Value as Float**
   - Description: Test should verify the accuracy of the function when the rate value is a float number.

6. **Scenario: Rate Value as Large Number**
   - Description: Test should verify the behavior of the function when the rate value is a large number.

7. **Scenario: Null Rate Value**
   - Description: Test should verify the behavior of the function when the rate value is null.

8. **Scenario: Rate Value with Decimal Precision**
   - Description: Test should verify the accuracy of the function when the rate value has a decimal precision.

9. **Scenario: Concurrent Access**
   - Description: Test should verify the behavior of the function when accessed simultaneously by multiple threads.

10. **Scenario: Rate Value with Maximum Float Value**
    - Description: Test should verify the behavior of the function when the rate value is the maximum float value. 

Note: These scenarios are assuming that the rate value can be modified. If it is a constant, some scenarios may not apply.
*/
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class TimeEntry {
    private String description;
    private float rate;
    private int time;

    public String getDescription() {
        return description;
    }

    public void setDescription(String value) {
        this.description = value;
    }

    public float getRate() {
        return rate;
    }

    public void setRate(float value) {
        this.rate = value;
    }

    public int getTime() {
        return time;
    }

    public void setTime(int value) {
        this.time = value;
    }

    @Override
    public String toString() {
        return "TimeEntry{" + "description='" + description + '\'' + ", rate=" + rate + ", time=" + time + '}';
    }
}
